<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on NonoNoe</title>
    <link>https://NonoNoe.github.io/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on NonoNoe</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 14 Mar 2025 09:23:53 +0800</lastBuildDate>
    <atom:link href="https://NonoNoe.github.io/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算法笔记（错题收集）</title>
      <link>https://NonoNoe.github.io/posts/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 14 Mar 2025 09:23:53 +0800</pubDate>
      <guid>https://NonoNoe.github.io/posts/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;div class=&#34;my-toc&#34;&gt;&#xD;&#xA;  &lt;h1&gt;目录&lt;/h1&gt;&#xD;&#xA;  &lt;nav id=&#34;TableOfContents&#34;&gt;&#xA;  &lt;ul&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#0常考常错常忘&#34;&gt;0，常考常错常忘&lt;/a&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#时间空间复杂度&#34;&gt;时间/空间复杂度&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#数据元素的存储结构&#34;&gt;数据元素的存储结构&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#数组的存取&#34;&gt;数组的存取&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#队列的各种情况判定&#34;&gt;队列的各种情况判定&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#输出受限的双向队列&#34;&gt;输出受限的双向队列&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#常见排序算法的稳定性&#34;&gt;常见排序算法的稳定性&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#有序数组合并时间复杂度&#34;&gt;有序数组合并时间复杂度&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#二叉树相关概念&#34;&gt;二叉树相关概念&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#堆栈队列&#34;&gt;堆/栈/队列&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#lifo与filo--lilo与fifo&#34;&gt;LIFO与FILO , LILO与FIFO&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#大根堆小根堆&#34;&gt;大根堆/小根堆&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#linux-中的查找&#34;&gt;Linux 中的查找&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#for-循环和-foreach-循环&#34;&gt;for 循环和 foreach 循环&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#c-中常用的容器类&#34;&gt;C# 中常用的容器类&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#1小数点精度设置&#34;&gt;1，小数点精度设置&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#2二叉树编号&#34;&gt;2，二叉树编号&lt;/a&gt;&lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#3前中后缀表达式&#34;&gt;3，前中后缀表达式&lt;/a&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#前缀表达式&#34;&gt;前缀表达式&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#中缀表达式&#34;&gt;中缀表达式&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#后缀表达式&#34;&gt;后缀表达式&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/li&gt;&#xA;    &lt;li&gt;&lt;a href=&#34;#4-c-小知识&#34;&gt;4， C# 小知识&lt;/a&gt;&#xA;      &lt;ul&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#c-各类修饰符&#34;&gt;C# 各类修饰符&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#c-中的gc机制&#34;&gt;C# 中的GC机制&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#c-装箱与拆箱&#34;&gt;C# 装箱与拆箱&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#c-ref-与-out&#34;&gt;C# ref 与 out&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#unity-c-线程与协程&#34;&gt;Unity C# 线程与协程&lt;/a&gt;&lt;/li&gt;&#xA;        &lt;li&gt;&lt;a href=&#34;#unity-的-playerprefs-类&#34;&gt;Unity 的 PlayerPrefs 类&lt;/a&gt;&lt;/li&gt;&#xA;      &lt;/ul&gt;&#xA;    &lt;/li&gt;&#xA;  &lt;/ul&gt;&#xA;&lt;/nav&gt;&#xD;&#xA;&lt;/div&gt;&#xA;&lt;a href=&#34;#&#34; class=&#34;back-to-top&#34;&gt;↑ 返回顶部&lt;/a&gt;&#xD;&#xA;&#xD;&#xA;&lt;style&gt;&#xD;&#xA; &#xD;&#xA;.back-to-top {&#xD;&#xA;  position: fixed;         &#xD;&#xA;  bottom: 20px;            &#xD;&#xA;  right: 80px;             &#xD;&#xA;  background-color: #3c3c3c;&#xD;&#xA;  color: #fff;&#xD;&#xA;  padding: 0.6rem 1rem;&#xD;&#xA;  border-radius: 5px;&#xD;&#xA;  text-decoration: none;&#xD;&#xA;  font-size: 1.2rem;&#xD;&#xA;  display: none;           &#xD;&#xA;  z-index: 1000;&#xD;&#xA;  box-shadow: 0 2px 6px rgba(0,0,0,0.3);&#xD;&#xA;  transition: opacity 0.3s ease;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;.back-to-top:hover {&#xD;&#xA;  background-color: #8f8f8f;&#xD;&#xA;  color: rgb(77, 76, 80);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;.back-to-top.show {&#xD;&#xA;  display: block;&#xD;&#xA;}&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&#xD;&#xA;&lt;script&gt;&#xD;&#xA;&#xD;&#xA;const btn = document.querySelector(&#39;.back-to-top&#39;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;window.addEventListener(&#39;scroll&#39;, () =&gt; {&#xD;&#xA;  if (window.scrollY &gt; 200) { &#xD;&#xA;    btn.classList.add(&#39;show&#39;);&#xD;&#xA;  } else {&#xD;&#xA;    btn.classList.remove(&#39;show&#39;);&#xD;&#xA;  }&#xD;&#xA;});&#xD;&#xA;&lt;/script&gt;&#xD;&#xA;&#xA;&lt;h2 id=&#34;0常考常错常忘&#34;&gt;&#xA;  0，常考常错常忘&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#0%e5%b8%b8%e8%80%83%e5%b8%b8%e9%94%99%e5%b8%b8%e5%bf%98&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;时间空间复杂度&#34;&gt;&#xA;  时间/空间复杂度&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%97%b6%e9%97%b4%e7%a9%ba%e9%97%b4%e5%a4%8d%e6%9d%82%e5%ba%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;空间复杂度指的是随着输入规模 n 的增长，程序额外占用的内存大小的增长趋势。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
